(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([e.id,"* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  list-style: none;\r\n}\r\n\r\nhtml {\r\n  font-size: 62.5%;\r\n}\r\n\r\nbody {\r\n  display: flex;\r\n  padding: 1.4rem\r\n}\r\n\r\np {\r\n  font-size: 1.4rem;\r\n}\r\n\r\nlabel, input, textarea, button {\r\n  font-size: 2rem;\r\n}\r\n\r\nbutton {\r\n  padding: 0.3rem;\r\n}\r\n\r\n.sidebar {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  width: 25%;\r\n  max-width: 20rem;\r\n}\r\n\r\nsection {\r\n  width: 100%;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  font-size: 6rem;\r\n}\r\n\r\nh3 {\r\n  font-size: 3.2rem;\r\n}\r\n\r\nform {\r\n  margin: 1rem;\r\n  margin-bottom: 3rem;\r\n}\r\n\r\nform li {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 1rem;\r\n  max-width: 18rem;\r\n}\r\n\r\n#todos {\r\n  display: grid;\r\n  grid-template-columns: repeat(5, 1fr);\r\n  gap: 1.4rem;\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;EACtB,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb;AACF;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,YAAY;EACZ,UAAU;EACV,gBAAgB;AAClB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,qCAAqC;EACrC,WAAW;AACb",sourcesContent:["* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  list-style: none;\r\n}\r\n\r\nhtml {\r\n  font-size: 62.5%;\r\n}\r\n\r\nbody {\r\n  display: flex;\r\n  padding: 1.4rem\r\n}\r\n\r\np {\r\n  font-size: 1.4rem;\r\n}\r\n\r\nlabel, input, textarea, button {\r\n  font-size: 2rem;\r\n}\r\n\r\nbutton {\r\n  padding: 0.3rem;\r\n}\r\n\r\n.sidebar {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  width: 25%;\r\n  max-width: 20rem;\r\n}\r\n\r\nsection {\r\n  width: 100%;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  font-size: 6rem;\r\n}\r\n\r\nh3 {\r\n  font-size: 3.2rem;\r\n}\r\n\r\nform {\r\n  margin: 1rem;\r\n  margin-bottom: 3rem;\r\n}\r\n\r\nform li {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 1rem;\r\n  max-width: 18rem;\r\n}\r\n\r\n#todos {\r\n  display: grid;\r\n  grid-template-columns: repeat(5, 1fr);\r\n  gap: 1.4rem;\r\n}"],sourceRoot:""}]);const c=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],c=0;c<e.length;c++){var s=e[c],d=r.base?s[0]+r.base:s[0],l=i[d]||0,A="".concat(d," ").concat(l);i[d]=l+1;var u=t(A),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var m=o(p,r);r.byIndex=c,n.splice(c,0,{identifier:A,updater:m,references:1})}a.push(A)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=t(i[a]);n[c].references--}for(var s=r(e,o),d=0;d<i.length;d++){var l=t(i[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),i=t(569),a=t.n(i),c=t(565),s=t.n(c),d=t(216),l=t.n(d),A=t(589),u=t.n(A),p=t(426),m={};m.styleTagTransform=u(),m.setAttributes=s(),m.insert=a().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=l(),n()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;const f=e=>{const n=e;let t=[];return{addTodo:e=>{t.push(e)},getProjectName:()=>n,getTodos:()=>t}},g=[];let E=f("Todos");function C(){return E}const h={todoTitle:document.getElementById("todo-title"),todoDescription:document.getElementById("todo-description"),todoDate:document.getElementById("todo-date"),todoContainer:document.getElementById("todos"),projectName:document.getElementById("project-title"),currentProject:document.getElementById("current-project"),projectContainer:document.getElementById("projects")};function v(){const e=h.todoTitle.value,n=h.todoDescription.value;return{title:e,date:h.todoDate.value,desc:n,projectName:h.projectName.value}}function y(e){h.currentProject.textContent=e.getProjectName(),h.todoContainer.innerHTML="",e.getTodos().forEach((e=>{!function(e){const n=document.createElement("div"),t=document.createElement("h3"),r=document.createElement("p"),o=document.createElement("p");t.textContent=e.getTitle(),r.textContent=e.getDesc(),o.textContent=e.getDueDate(),n.appendChild(t),n.appendChild(r),n.appendChild(o),h.todoContainer.appendChild(n)}(e)}))}const b=document.getElementById("todo-submit"),B=document.getElementById("project-submit");b.addEventListener("click",(function(e){e.preventDefault();const n=C(),t=v();if(""!=t.title){const e=((e,n,t,r,o)=>{let i=e,a=n,c="priority",s=r,d="notes";return{getTitle:()=>i,setTitle:e=>{i=e},getDesc:()=>a,setDesc:e=>{a=e},getPriority:()=>c,setPriority:e=>{c=e},getDueDate:()=>s,setdueDate:e=>{s=e},getNotes:()=>d,setNotes:e=>{d=e}}})(t.title,t.desc,0,t.date);n.addTodo(e),y(n)}else alert("Title is required")})),B.addEventListener("click",(function(e){e.preventDefault();const n=v();if(""!=n.projectName){const e=f(n.projectName);!function(e){g.push(e)}(e),function(e){E=e}(e),y(e),function(e){h.projectContainer.innerHTML="",e.forEach((e=>{const n=document.createElement("h3");n.textContent=e.getProjectName(),h.projectContainer.appendChild(n)})),console.log(e)}(g)}else alert("Project name is required")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,